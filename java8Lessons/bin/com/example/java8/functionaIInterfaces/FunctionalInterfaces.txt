
FunctionalInterface : 
An informative annotation type used to indicate that an interface type declaration is intended to 
be a <i>functional interface</i> as  defined by the Java Language Specification.Conceptually, a functional interface 
has exactly one abstract method.Since default methods [- A default method is a public non-abstract instance method, that is, 
a non-static method with a body, declared in an interface type] have an implementation, they are not abstract.
If an interface declares an abstract method overriding one of the public methods of java.lang.Object, 
that also does not count toward the interface's abstract method count since any implementation of the interface will have an 
implementation from java.lang.Object or elsewhere. 

Eg : 
Predicate (test) - used to test something, applies this function to the argument and returns boolean
 Consumer (accept) - accepts argument and applies the function and returns nothing
 Function (apply) - applies this function to the incoming object and returns a result of same or different type
 BinaryOperator (apply) takes 2 arguments of same type, perfroms the operation and returns the same type
 Supplier  (get)      - No arguments but gets/returning something back, eg : generate random numbers
 
 BiPredicate
 BiFunction - Represents a function that accepts two arguments and produces a result.This is the two-arity specialization of Function.
 BiConsumer